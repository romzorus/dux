// **ModuleName** module : <short description>

use serde::{Serialize, Deserialize};
use crate::workflow::change::ModuleBlockChange;
use crate::workflow::result::{ApiCallResult, ApiCallStatus};
use crate::modules::{DryRun, Apply};
use crate::modules::ModuleApiCall;
use connection::prelude::*;

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct **ModuleName**BlockExpectedState {
    // state: Option<String>,
    // package: Option<String>,
    // upgrade: Option<bool>
}

impl DryRun for **ModuleName**BlockExpectedState {
    pub fn dry_run_block(&self, hosthandler: &mut HostHandler, privilege: Privilege) -> ModuleBlockChange {
        assert!(hosthandler.ssh2.sshsession.authenticated());

        let mut changes: Vec<ModuleApiCall> = Vec::new();

        // Do something

        return ModuleBlockChange::changes(changes);
    }

}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct **ModuleName**ApiCall {
    // action: String,
    // package: Option<String>,
    // privilege: Privilege
}

impl Apply for **ModuleName**ApiCall {

    pub fn display(&self) -> String {
        return String::from("Template");
    }

    pub fn apply_moduleblock_change(&self, hosthandler: &mut HostHandler) -> ApiCallResult {
        assert!(hosthandler.ssh2.sshsession.authenticated());

        return ApiCallResult::none();

    }
}
